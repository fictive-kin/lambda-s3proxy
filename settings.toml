
[default]

# If needed to ensure that all redirects use a certain hostname, set this appropriately:
# DOMAIN_NAME = "my-example.com"

# Affects response headers
ADD_CACHE_HEADERS = true

# If false, disables the Flask before_request trailing slash redirection handling
TRAILING_SLASH_REDIRECTION = true

# Sets the special endpoint to return the browser's location via CloudFront's geoip headers
# This requires that the API Gateway is behind a _real_ CloudFront distro. If not set,
# no localization endpoint is available
# GEOGRAPHY_ROUTE = '/localizer'

# Enable the use of country_code, when finding points closest to the user. Default is true.
# GEOGRAPHY_USE_COUNTRY_CODE_COMPARISON = true

# Sets the allowed origins for CORS. Should be a list of allowed origins or '*' for any
ALLOWED_ORIGINS = ['*']

# OPTIONS requests bypass all checks other than against ALLOWED_ORIGINS when this is true
SHORTCIRCUIT_OPTIONS = true

# Status code to use for redirects generated from FlaskJSONRedirects
REDIRECTS_DEFAULT_STATUS_CODE = 302

# True if FlaskJSONRedirects should add redirects for both `<path>` and `<path>/`
# False to only handle explicitly defined redirects
REDIRECTS_HANDLE_TRAILING_SLASH = true

# The location of various control files within the S3 bucket
S3_REDIRECTS_FILE = 'redirects.json'
S3_AUTHORIZER_FILE = 'authorizations.json'
S3_ELEVENTY_FILE = '11ty-serverless.json'
S3_LOCALES_FILE = 'locales.json'

# Status code to use for redirects generated from FlaskS3Proxy
S3PROXY_REDIRECT_CODE = 302

# True if FlaskS3Proxy should not serve index.html paths without a trailing slash
S3PROXY_TRAILING_SLASH_ONLY = false

# True if FlaskS3Proxy should redirect `<path>/` to `<path>` before attempting to check S3
S3PROXY_TRAILING_SLASH_REDIRECTION = true

# The bucket that FlaskS3Proxy should check for files. This should probably be set in the env
# S3PROXY_BUCKET = "some-bucket-name"

# The prefix, if any, that FlaskS3Proxy should add to all proxied requests to S3
# S3PROXY_PREFIX = ""

# Routes that you want handled by FlaskS3Proxy.
# S3PROXY_ROUTES = ["/", "/<path:url>"]

# Locales that are handled by S3Proxy localization. These correspond to path prefixes in
# the S3 bucket.
# S3PROXY_LOCALES = ["de", "fr", "it", "es"]

# A dictionary of routes and buckets that can be used in department-upload-permission
# specific circumstances (among other uses). Any path prior to the `<path:url>` will be
# used as a prefix to the file in it's S3 bucket.
# S3PROXY_SUBROUTES = {"/wp-content/uploads/<path:url>" = "my-wp-backup-bucket"}

# To set a generic authentication, do so here, using a base64 encoded username:password
#AUTHORIZER_ROUTES = {"/" = "<base64-user-pass>"}
AUTHORIZER_PATHS_WITHOUT_AUTH = ["/static"]

# Default CSP policy that we want in place
CSP_DEFAULT_SRC = [
    "data:",
    "https:",
    "self",
    "unsafe-inline"
]
CSP_UPGRADE_INSECURE_REQUESTS = true

PATHS_TO_LEAVE_TRAILING_SLASH = [
    "^/preview/",
]
